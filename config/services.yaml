# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'fr'
    image_directory: '%kernel.project_dir%/public/img'


services:

    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
    


        
    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones


    admin.champs:
        class: App\Admin\ChampAdmin
        arguments: [~, App\Entity\Champ, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: admin, label: Champs }
        public: true
        
    
    admin.Onglet:
        class: App\Admin\OngletAdmin
        arguments: [~, App\Entity\Onglet, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: admin, label: Onglet }
        public: true
        calls:
            - [addChild, ['@admin.champs']]            


  
            
    admin.Ssmenu:
        autowire: true
        class: App\Admin\SsmenuAdmin
        arguments: [~, App\Entity\Ssmenu, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: admin, label: Ssmenu }
        public: true
        calls:
            - [addChild, ['@admin.Onglet']]            

   
            
    admin.Menu:
        autowire: true
        class: App\Admin\MenuAdmin
        arguments: [~, App\Entity\Menu, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: admin, label: Menu }
        public: true
        calls:
            - [addChild, ['@admin.Ssmenu']]


    projet.type_message:
        class: App\Admin\TypeMessageAdmin
        arguments: [~, App\Entity\TypeMessage, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: message, label: TypeMessage }
        public: true

    projet.message:
        class: App\Admin\MessageAdmin
        arguments: [~, App\Entity\Message, App\Controller\MessageAdminController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: message, label: Message }
        public: true
        
    projet.user:
        class: App\Admin\UserAdmin
        arguments: [~, App\Entity\User, App\Controller\UserAdminController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: projet, label: User }
        public: true

    admin.appli:
        class: App\Admin\AppliAdmin
        arguments: [~, App\Entity\Appli, App\Controller\AppliAdminController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: admin, label: Appli }
        public: true

    projet.image:
        class: App\Admin\ImageAdmin
        arguments: [~, App\Entity\Image, App\Controller\ImageAdminController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: projet, label: Image }
        public: true



    
    App\Service\FileUploader:  
        arguments: 
            $targetDirectory: '%image_directory%'    
         
    
    App\EventListener\ImageUploadListener:
        tags:
            - { name: doctrine.event_listener, event: prePersist }
            - { name: doctrine.event_listener, event: preUpdate }

    App\Form\ImageType:
        arguments:
            $imagePath: '%image_directory%'



    App\Doctrine\CurrentUserExtension:
        tags:
            - { name: api_platform.doctrine.orm.query_extension.collection , priority: 9}
            - { name: api_platform.doctrine.orm.query_extension.item }
    
    App\Doctrine\UserUserExtension:
        tags:
            - { name: api_platform.doctrine.orm.query_extension.collection , priority: 9}
            - { name: api_platform.doctrine.orm.query_extension.item }        


    App\Resolver\MagazineCollectionResolver:
        tags:
            - { name: api_platform.graphql.query_resolver }    

    App\Mercure\JwtProvider:
        arguments:
            $secret: '%env(MERCURE_JWT_KEY)%'   

    App\Mercure\CookieGenerator:
        arguments:
            $secret: '%env(MERCURE_JWT_KEY)%'

    admin.document:
        class: App\Admin\DocumentAdmin
        arguments: [~, App\Entity\Document, App\Controller\DocumentAdminController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: projet, label: Document }
        public: true

    admin.type_projet:
        class: App\Admin\TypeProjetAdmin
        arguments: [~, App\Entity\TypeProjet, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: workflow, label: TypeProjet }
        public: true

    admin.famille_projet:
        class: App\Admin\FamilleProjetAdmin
        arguments: [~, App\Entity\FamilleProjet, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: workflow, label: FamilleProjet }
        public: true

    

    projet.condition:
        class: App\Admin\ConditionAdmin
        arguments: [~, App\Entity\Condition, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: workflow, label: Condition }
        public: true

    admin.projet:
        class: App\Admin\ProjetAdmin
        arguments: [~, App\Entity\Projet, App\Controller\ProjetAdminController, Yokai\SonataWorkflow\Controller\WorkflowController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: projet, label: Projet }
        public: true
     
    admin.extension.workflow.projet:
        class: Yokai\SonataWorkflow\Admin\Extension\WorkflowExtension
        arguments:
            - '@workflow.registry'
            - transitions_icons:
                  to_review: fa fa-question
                  publish: fa fa-edit
                  reject: fa fa-question

    admin.energie_apres_travaux:
        class: App\Admin\EnergieApresTravauxAdmin
        arguments: [~, App\Entity\EnergieApresTravaux, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: adresse, label: EnergieApresTravaux }
        public: true

    admin.departement:
        class: App\Admin\DepartementAdmin
        arguments: [~, App\Entity\Departement, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: adresse, label: Departement }
        public: true

    admin.type_habitation:
        class: App\Admin\TypeHabitationAdmin
        arguments: [~, App\Entity\TypeHabitation, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: adresse, label: TypeHabitation }
        public: true

    admin.taille_surface:
        class: App\Admin\TailleSurfaceAdmin
        arguments: [~, App\Entity\TailleSurface, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: adresse, label: TailleSurface }
        public: true

    admin.adress:
        class: App\Admin\AdressAdmin
        arguments: [~, App\Entity\Adress, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: adresse, label: Adress }
        public: true

    admin.place:
        class: App\Admin\PlaceAdmin
        arguments: [~, App\Entity\Place, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: workflow, label: Place }
        public: true

    admin.type_place:
        class: App\Admin\TypePlaceAdmin
        arguments: [~, App\Entity\TypePlace, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: workflow, label: TypePlace }
        public: true

    App\EventListener\ProjetSubscriber:
        tags:
            - { name: doctrine.event_subscriber, connection: default }    
